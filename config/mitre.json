{
  "SMS": [
    {
      "type": "attack-pattern",
      "id": "attack-pattern--c6421411-ae61-42bb-9098-73fddb315002",
      "external_references": [
                {
                    "source_name": "mitre-attack",
                    "url": "https://attack.mitre.org/techniques/T1636/004",
                    "external_id": "T1636.004"
                }
              ],
      "name": "SMS Messages",
      "description": "Adversaries may utilize standard operating system APIs to gather SMS messages. On Android, this can be accomplished using the SMS Content Provider. iOS provides no standard API to access SMS messages. "
    }
  ],
  "Audio": [
    {
      "type": "attack-pattern",
      "id": "attack-pattern--6683aa0c-d98a-4f5b-ac57-ca7e9934a760",
       "external_references": [
                {
                    "source_name": "mitre-attack",
                    "url": "https://attack.mitre.org/techniques/T1429",
                    "external_id": "T1429"
                }
              ],
      "name": "Audio Capture",
      "description": "Adversaries may capture audio to collect information by leveraging standard operating system APIs of a mobile device. Examples of audio information adversaries may target include user conversations, surroundings, phone calls, or other sensitive information."
            
    }
  ],
  "Screen": [
    {
      "type": "attack-pattern",
      "id": "attack-pattern--73c26732-6422-4081-8b63-6d0ae93d449e",
      "external_references": [
                {
                    "source_name": "mitre-attack",
                    "url": "https://attack.mitre.org/techniques/T1513",
                    "external_id": "T1513"
                }
      ],
      "name": "Screen Capture",
      "description": "Adversaries may use screen capture to collect additional information about a target device, such as applications running in the foreground, user data, credentials, or other sensitive information. Applications running in the background can capture screenshots or videos of another application running in the foreground by using the Android MediaProjectionManager (generally requires the device user to grant consent). Background applications can also use Android accessibility services to capture screen contents being displayed by a foreground application. An adversary with root access or Android Debug Bridge (adb) access could call the Android screencap or screenrecord commands."
    }
  ],
  "Notification": [
    {
      "type": "attack-pattern",
      "id": "attack-pattern--39dd7871-f59b-495f-a9a5-3cb8cc50c9b2",
           
     "external_references": [
                {
                    "source_name": "mitre-attack",
                    "url": "https://attack.mitre.org/techniques/T1517",
                    "external_id": "T1517"
                }
     ],
    "name": "Access Notifications",
    "description": "Adversaries may collect data within notifications sent by the operating system or other applications. Notifications may contain sensitive data such as one-time authentication codes sent over SMS, email, or other mediums. In the case of Credential Access, adversaries may attempt to intercept one-time code sent to the device. Adversaries can also dismiss notifications to prevent the user from noticing that the notification has arrived and can trigger action buttons contained within notifications."
    }
  ],
  "Web": [
    {
      "type": "attack-pattern",
      "id": "attack-pattern--2282a98b-5049-4f61-9381-55baca7c1add",
      "external_references": [
                {
                    "source_name": "mitre-attack",
                    "url": "https://attack.mitre.org/techniques/T1437/001",
                    "external_id": "T1437.001"
                }
              ],
      "name": "Web Protocols",
            "description": "AAdversaries may communicate using application layer protocols associated with web protocols traffic to avoid detection/network filtering by blending in with existing traffic. Commands to remote mobile devices, and often the results of those commands, will be embedded within the protocol traffic between the mobile client and server."
    },
    {
      "type": "attack-pattern",
      "id": "attack-pattern--c6a146ae-9c63-4606-97ff-e261e76e8380",
      "external_references": [
                {
                    "source_name": "mitre-attack",
                    "url": "https://attack.mitre.org/techniques/T1481",
                    "external_id": "T1481"
                }
            ],
      "name": "Web Service",
            "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media, acting as a mechanism for C2, may give a significant amount of cover. This is due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection."
    },
    {
      "type": "attack-pattern",
      "id": "attack-pattern--986f80f7-ff0e-4f48-87bd-0394814bbce5",
      "external_references": [
                {
                    "source_name": "mitre-attack",
                    "url": "https://attack.mitre.org/techniques/T1481/001",
                    "external_id": "T1481.001"
                }
            ],
      "name": "Dead Drop Resolver",
            "description": "Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers."
    },
    {
      "type": "attack-pattern",
      "id": "attack-pattern--939808a7-121d-467a-b028-4441ee8b7cee",
      "external_references": [
                {
                    "source_name": "mitre-attack",
                    "url": "https://attack.mitre.org/techniques/T1481/002",
                    "external_id": "T1481.002"
                }
            ],
            "name": "Bidirectional Communication",
            "description": "Adversaries may use an existing, legitimate external Web service channel as a means for sending commands to and receiving output from a compromised system. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet."
    },
    {
      "type": "attack-pattern",
      "id": "attack-pattern--d916f176-a1ca-4a78-9fdd-4058bc28162e",
      "external_references": [
                {
                    "source_name": "mitre-attack",
                    "url": "https://attack.mitre.org/techniques/T1481/003",
                    "external_id": "T1481.003"
                }
            ],
      "name": "One-Way Communication",
            "description": "Adversaries may use an existing, legitimate external Web service channel as a means for sending commands to a compromised system without receiving return output. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response."
    }

  ],
  "Clipboard" : [
    {
     "type": "attack-pattern",
     "id": "attack-pattern--c4b96c0b-cb58-497a-a1c2-bb447d79d692",
     "external_references": [
       {
         "source_name": "mitre-attack",
         "url": "https://attack.mitre.org/techniques/T1414",
         "external_id": "T1414"
       }
     ],
     "name": "Clipboard Data",
     "description": "Adversaries may abuse clipboard manager APIs to obtain sensitive information copied to the device clipboard. For example, passwords being copied and pasted from a password manager application could be captured by a malicious application installed on the device."
   }

  ],

  "Location" : [
    {
      "type": "attack-pattern",
      "id": "attack-pattern--e422b6fa-4739-46b9-992e-82f1b350c780",
      "external_references": [
        {
          "source_name": "mitre-attack",
          "url": "https://attack.mitre.org/techniques/T1627/001",
          "external_id": "T1627.001"
        }
      ],
      "name": "Geofencing",
      "description": "Adversaries may use a device’s geographical location to limit certain malicious behaviors. For example, malware operators may limit the distribution of a second stage payload to certain geographic regions."
    },
    {
      "type": "attack-pattern",
      "id": "attack-pattern--99e6295e-741b-4857-b6e5-64989eb039b4",
      "external_references": [
        {
          "source_name": "mitre-attack",
          "url": "https://attack.mitre.org/techniques/T1430",
          "external_id": "T1430"
        }
      ],
      "name": "Location Tracking",
      "description": "Adversaries may track a device’s physical location through use of standard operating system APIs via malicious or exploited applications on the compromised device."
    },
    {
      "type": "attack-pattern",
      "id": "attack-pattern--0f4fb01b-d57a-4375-b7a2-342c9d3248f7",
      "external_references": [
        {
          "source_name": "mitre-attack",
          "url": "https://attack.mitre.org/techniques/T1430/002",
          "external_id": "T1430.002"
        }
      ],
      "name": "Impersonate SS7 Nodes",
      "description": "Adversaries may exploit the lack of authentication in signaling system network nodes to track the location of mobile devices by impersonating a node."
    },
    {
      "type": "attack-pattern",
      "id": "attack-pattern--498e7b81-238d-404c-aa5e-332904d63286",
      "name": "Execution Guardrails",
      "description": "Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary’s campaign. Values an adversary can provide about a target system or environment to use as guardrails may include environment information such as location.",
      "external_references": [
        {
          "source_name": "mitre-attack",
          "url": "https://attack.mitre.org/techniques/T1627",
          "external_id": "T1627"
        }
      ]
    }
  ],
  "Persistance": [
    {
      "type": "attack-pattern",
      "id": "attack-pattern--46d818a5-67fa-4585-a7fc-ecf15376c8d5",
      "name": "Boot or Logon Initialization Scripts",
      "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts are part of the underlying operating system and are not accessible to the user unless the device has been rooted or jailbroken.",
      "external_references": [
        {
          "source_name": "mitre-attack",
          "url": "https://attack.mitre.org/techniques/T1398",
          "external_id": "T1398"
        }
      ]
    },
    {
      "type": "attack-pattern",
      "id": "attack-pattern--c6e17ca2-08b5-4379-9786-89bd05241831",
      "name": "System Runtime API Hijacking",
      "description": "Adversaries may execute their own malicious payloads by hijacking the way an operating system runs applications. Hijacking execution flow can be for the purposes of persistence since this hijacked execution may reoccur at later points in time.",
      "external_references": [
        {
          "source_name": "mitre-attack",
          "url": "https://attack.mitre.org/techniques/T1625/001",
          "external_id": "T1625.001"
        }
      ]
    },
    {
      "type": "attack-pattern",
      "id": "attack-pattern--670a4d75-103b-4b14-8a9e-4652fa795edd",
      "name": "Hijack Execution Flow",
      "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run applications. Hijacking execution flow can be for the purposes of persistence since this hijacked execution may reoccur over time.",
      "external_references": [
        {
          "source_name": "mitre-attack",
          "url": "https://attack.mitre.org/techniques/T1625",
          "external_id": "T1625"
        }
      ]
    },
    {
      "id": "T1541",
      "name": "Foreground Persistence",
      "description": "Adversaries may abuse Android's startForeground() API method to maintain continuous sensor access. Beginning in Android 9, idle applications running in the background no longer have access to device sensors, such as the camera, microphone, and gyroscope. Applications can retain sensor access by running in the foreground, using Android’s startForeground() API method. This informs the system that the user is actively interacting with the application, and it should not be killed. The only requirement to start a foreground service is showing a persistent notification to the user.",
      "external_references": [
        {
          "source_name": "mitre-attack",
          "external_id": "T1541",
          "url": "https://attack.mitre.org/techniques/T1541"
        }
      ]
    }
  ],
  "Overlay" : [
    {
      "id": "T1629.001",
      "name": "Prevent Application Removal",
      "description": "Adversaries may abuse the Android device administration API to prevent the user from uninstalling a target application. In earlier versions of Android, device administrator applications needed their administration capabilities explicitly deactivated by the user before the application could be uninstalled. This was later updated so the user could deactivate and uninstall the administrator application in one step.",
      "external_references": [
        {
          "source_name": "mitre-attack",
          "external_id": "T1629.001",
          "url": "https://attack.mitre.org/techniques/T1629/001"
        }
      ]
    },
    {
      "id": "attack-pattern--a8c31121-852b-46bd-9ba4-674ae5afe7ad",
      "name": "Input Capture",
      "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal device usage, users often provide credentials to various locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Keylogging) or rely on deceiving the user into providing input into what they believe to be a genuine application prompt (e.g. GUI Input Capture).",
    
      "external_references": [
        {
          "source_name": "mitre-attack",
          "external_id": "T1417",
          "url": "https://attack.mitre.org/techniques/T1417"
        }
      ]
    },
    {
      "id": "attack-pattern--4c58b7c6-a839-4789-bda9-9de33e4d4512",
      "name": "GUI Input Capture",
      "description": "Adversaries may mimic common operating system GUI components to prompt users for sensitive information with a seemingly legitimate prompt. The operating system and installed applications often have legitimate needs to prompt the user for sensitive information such as account credentials, bank account information, or Personally Identifiable Information (PII). Compared to traditional PCs, the constrained display size of mobile devices may impair the ability to provide users with contextual information, making users more susceptible to this technique’s use.",
     
      "external_references": [
        {
          "source_name": "mitre-attack",
          "external_id": "T1417.002",
          "url": "https://attack.mitre.org/techniques/T1417/002"
        }
      ]
    }
  ],
  "Crypto" : [
    {
      "id": "attack-pattern--ed2c05a1-4f81-4d97-9e1b-aff01c34ae84",
      "name": "Encrypted Channel",
      "description": "Adversaries may explicitly employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if necessary secret keys are encoded and/or generated within malware samples/configuration files.",
     
      "external_references": [
        {
          "source_name": "mitre-attack",
          "external_id": "T1521",
          "url": "https://attack.mitre.org/techniques/T1521"
        }
      ]
    },
    {
      "id": "attack-pattern--bb4387ab-7a51-468b-bf5f-a9a8612f0303",
      "name": "Symmetric Cryptography",
      "description": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic, rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, Blowfish, and RC4.",
      
      "external_references": [
        {
          "source_name": "mitre-attack",
          "external_id": "T1521.001",
          "url": "https://attack.mitre.org/techniques/T1521/001"
        }
      ]
    },
    {
      "id": "attack-pattern--16d73b64-5681-4ea0-9af4-4ad86f7c96e8",
      "name": "Asymmetric Cryptography",
      "description": "Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic, rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private that should not be distributed. Due to how asymmetric algorithms work, the sender encrypts data with the receiver’s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA, ElGamal, and ECDSA.",
      
      "external_references": [
        {
          "source_name": "mitre-attack",
          "external_id": "T1521.002",
          "url": "https://attack.mitre.org/techniques/T1521/002"
        }
      ]
    },
    {
      "id": "attack-pattern--dfafc230-5465-4993-8dc5-f51fa9fec002",
      "name": "SSL Pinning",
      "description": "Adversaries may use SSL Pinning to protect the C2 traffic from being intercepted and analyzed.",
      
      "external_references": [
        {
          "external_id": "T1521.003",
          "url": "https://attack.mitre.org/techniques/T1521/003"
        }
      ]
      
      
    }
  ],
  "Dropper" : [
    {
      "id": "attack-pattern--6c49d50f-494d-4150-b774-a655022d20a6",
      "name": "Download New Code at Runtime",
      "description": "Adversaries may download and execute dynamic code not included in the original application package after installation. This technique is primarily used to evade static analysis checks and pre-publication scans in official app stores. In some cases, more advanced dynamic or behavioral analysis techniques could detect this behavior. However, in conjunction with Execution Guardrails techniques, detecting malicious code downloaded after installation could be difficult.",
      "external_references": [
        {                
          "external_id": "T1407",
          "url": "https://attack.mitre.org/techniques/T1407"
        }
      ]
      
    }

  ]
}
